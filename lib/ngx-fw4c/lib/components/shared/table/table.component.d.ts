import { OnInit, ElementRef, RendererFactory2, AfterViewInit, OnDestroy } from '@angular/core';
import { TableOption, TableColumn, TableAction, EdittedField } from './table.model';
import { TableRowDetailDirective } from './table-row-detail.directive';
import { Observable, BehaviorSubject } from 'rxjs';
import { DataService } from '../services/data.service';
export declare class TableComponent implements OnInit, AfterViewInit, OnDestroy {
    private thisElement;
    protected rendererFactory: RendererFactory2;
    protected dataService: DataService;
    validationName: string;
    validationScope: string;
    option: TableOption;
    searchRef: ElementRef;
    gotoRef: ElementRef;
    tableRef: ElementRef;
    rowDetailTemplate: TableRowDetailDirective;
    items: any[];
    totalRecords: number;
    loading: boolean;
    selectedItems: any[];
    pageSize: number;
    orderBy: string;
    direction: string;
    totalPages: number[];
    currentPage: number;
    filter: any;
    maxPage: number;
    selectedAll: boolean;
    filterColumns: TableColumn[];
    toolbarActions: TableAction[];
    inlineActions: TableAction[];
    filterSectionToggle: boolean;
    textSearched: string;
    showReset: boolean;
    private defaultPageSize;
    private localData?;
    private _render;
    hasFilterSection: boolean;
    hasToolbarSection: boolean;
    hasFooterSection: boolean;
    hasDetailTemplate: boolean;
    hasPageSizeChooser: boolean;
    changePage$: BehaviorSubject<number>;
    private request;
    private previousRequest;
    private recursiveCounter;
    private subscriptions;
    protected edittedFields: EdittedField[];
    constructor(thisElement: ElementRef, rendererFactory: RendererFactory2, dataService: DataService);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    init(): void;
    callback(): Observable<any>;
    copy(item: any, refresh?: boolean, execute?: (item: any) => void, callback?: (copyItem: any) => void): void;
    acceptInlineEdit(field: string, index: number): void;
    cancelInlineEdit(item: any, field: string, index: number): void;
    closeInlineEdit(field: string, index: number): void;
    editInline(item: any, field: string, index: number): void;
    hasInlineEdit(item: any, field: string, index: number): boolean;
    retrieveInlineEdit(field: string, index: number): EdittedField;
    resetFilters(): void;
    getToolbarActions(standard: boolean): TableAction[];
    changePageSize(): void;
    handkeKeypress($event: any): void;
    goto($event: any, blur?: boolean): void;
    toggleFilterSection(): void;
    showSorter(column: TableColumn, direction: string): boolean;
    toggleRowDetail(item: any): void;
    sortAsync(column: TableColumn): void;
    selectAll(selected: boolean): void;
    clearAll(): void;
    selectItem(item: any): void;
    isRowSelected(item: any): boolean;
    hasAnyAction(item?: any): boolean;
    executeActionAsync(action: TableAction, item?: any, $event?: any, index?: number, loadedCallback?: Function): void;
    isActive(item: any): boolean;
    getCurrentIndex(index: number): number;
    getDropdownDisplayText(column: TableColumn, item: any): any;
    getPages(n: number): number[];
    reload(keepSelectedItems?: boolean): Observable<boolean>;
    search(advancedFilter?: boolean): void;
    trackRecords(record: any): any;
    searchAsync(advancedFilter?: boolean, currentPage?: number, keepSelectedItems?: boolean): Observable<boolean>;
    private checkedAllPageItems;
    private setDefaultOrder;
    setFilter(key: string, value: any): void;
    private retrieveAdvancedFilters;
    private buildRequest;
    private convertDatetime;
    private searchLocalItems;
    private convertUCode;
    private fuzzysearch;
    private removeAllSpaces;
    private bindResultData;
    private calculatePages;
    private resetSortAsync;
    private initTableTableTexts;
    private initTableTableMessages;
    private initMainColumns;
    private registerEvents;
}
